data "aws_availability_zones" "available" {
  state = "available"
}

data "aws_vpc" "default" {
  default = true
}

data "aws_subnets" "default" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.default.id]
  }
}

# Get the latest Amazon Linux 2023 AMI
data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["al2023-ami-*-x86_64"]
  }

  filter {
    name   = "state"
    values = ["available"]
  }
}

# Create security group for Axialy Admin
resource "aws_security_group" "axialy_admin" {
  name        = "${var.instance_identifier}-sg"
  description = "Security group for Axialy Admin application"
  vpc_id      = data.aws_vpc.default.id

  # SSH access
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "SSH access"
  }

  # HTTP access
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTP access"
  }

  # HTTPS access
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTPS access"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "Axialy Admin Security Group"
  }
}

# Enhanced user data script with proper error handling and file deployment
locals {
  user_data = base64encode(join("\n", [
    "#!/bin/bash",
    "set -e",
    "",
    "# Enhanced logging",
    "exec > >(tee /var/log/user-data.log) 2>&1",
    "echo 'Starting Axialy Admin server setup at $(date)'",
    "",
    "# Function for error handling",
    "error_exit() {",
    "    echo \"ERROR: $1\" >&2",
    "    echo \"Setup failed at $(date)\" >&2",
    "    exit 1",
    "}",
    "",
    "# Update system",
    "echo 'Updating system packages...'",
    "dnf update -y || error_exit 'Failed to update packages'",
    "",
    "# Install required packages with error checking",
    "echo 'Installing required packages...'",
    "dnf install -y httpd php php-cli php-fpm php-mysqlnd php-zip php-xml php-mbstring php-json php-curl php-gd php-opcache mysql unzip wget curl git || error_exit 'Failed to install packages'",
    "",
    "# Enable mod_headers for Apache",
    "echo 'LoadModule headers_module modules/mod_headers.so' >> /etc/httpd/conf/httpd.conf",
    "",
    "# Configure PHP for production",
    "echo 'Configuring PHP...'",
    "cat > /etc/php.ini << 'EOF'",
    "[PHP]",
    "memory_limit = 256M",
    "upload_max_filesize = 50M",
    "post_max_size = 50M",
    "max_execution_time = 300",
    "max_input_time = 300",
    "session.gc_maxlifetime = 14400",
    "session.cookie_secure = 0",
    "session.cookie_httponly = 1",
    "session.use_only_cookies = 1",
    "expose_php = Off",
    "display_errors = Off",
    "log_errors = On",
    "error_log = /var/log/php-errors.log",
    "date.timezone = UTC",
    "EOF",
    "",
    "# Create application directory",
    "echo 'Creating application directory...'",
    "mkdir -p /var/www/html",
    "rm -rf /var/www/html/* || true",
    "",
    "# Create the PHP application files directly",
    "echo 'Creating Axialy Admin application files...'",
    "",
    "# Create includes directory",
    "mkdir -p /var/www/html/includes",
    "",
    "# Create AdminDBConfig.php",
    "cat > /var/www/html/includes/AdminDBConfig.php << 'EOF'",
    "<?php",
    "namespace Axialy\\AdminConfig;",
    "use PDO;",
    "use RuntimeException;",
    "",
    "final class AdminDBConfig",
    "{",
    "    private const REQUIRED_VARS = ['DB_HOST','DB_USER','DB_PASSWORD'];",
    "    private static ?self $instance = null;",
    "    private string $host;",
    "    private string $user;",
    "    private string $password;",
    "    private string $port;",
    "    private string $nameAdmin;",
    "    private string $nameUI;",
    "    private array $pdoPool = [];",
    "",
    "    public static function getInstance(): self",
    "    {",
    "        return self::$instance ??= new self();",
    "    }",
    "",
    "    private function __construct()",
    "    {",
    "        $this->bootstrapEnvIfNeeded();",
    "        foreach (self::REQUIRED_VARS as $k) {",
    "            if (getenv($k) === false) {",
    "                throw new RuntimeException('Missing DB_* environment variables.');",
    "            }",
    "        }",
    "        $this->host      = getenv('DB_HOST');",
    "        $this->user      = getenv('DB_USER');",
    "        $this->password  = getenv('DB_PASSWORD');",
    "        $this->port      = getenv('DB_PORT') ?: '3306';",
    "        $this->nameAdmin = getenv('DB_NAME')     ?: 'axialy_admin';",
    "        $this->nameUI    = getenv('UI_DB_NAME')  ?: 'axialy_ui';",
    "    }",
    "",
    "    public function getPdo(): PDO { return $this->getPdoFor($this->nameAdmin); }",
    "    public function getPdoUI(): PDO { return $this->getPdoFor($this->nameUI); }",
    "",
    "    public function getPdoFor(string $dbName): PDO",
    "    {",
    "        if (!isset($this->pdoPool[$dbName])) {",
    "            $dsn = sprintf('mysql:host=%s;port=%s;dbname=%s;charset=utf8mb4', $this->host, $this->port, $dbName);",
    "            $pdo = new PDO($dsn, $this->user, $this->password, [",
    "                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,",
    "                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,",
    "            ]);",
    "            if ($dbName === $this->nameAdmin) {",
    "                $this->ensureSchema($pdo);",
    "            }",
    "            $this->pdoPool[$dbName] = $pdo;",
    "        }",
    "        return $this->pdoPool[$dbName];",
    "    }",
    "",
    "    private function ensureSchema(PDO $pdo): void",
    "    {",
    "        $pdo->exec(\"SET SQL_MODE = 'NO_AUTO_VALUE_ON_ZERO'\");",
    "        $pdo->exec(\"CREATE TABLE IF NOT EXISTS admin_users (",
    "            id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,",
    "            username VARCHAR(50) NOT NULL,",
    "            password VARCHAR(255) NOT NULL,",
    "            email VARCHAR(255) NOT NULL,",
    "            is_active TINYINT(1) NOT NULL DEFAULT 1,",
    "            is_sys_admin TINYINT(1) NOT NULL DEFAULT 1,",
    "            created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,",
    "            updated_at DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,",
    "            UNIQUE KEY uk_username (username),",
    "            KEY idx_is_active (is_active),",
    "            KEY idx_email (email)",
    "        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\");",
    "        $pdo->exec(\"CREATE TABLE IF NOT EXISTS admin_user_sessions (",
    "            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,",
    "            admin_user_id INT UNSIGNED NOT NULL,",
    "            session_token CHAR(64) NOT NULL,",
    "            created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,",
    "            expires_at DATETIME NOT NULL,",
    "            UNIQUE KEY uk_session_token (session_token),",
    "            KEY idx_admin_user_id (admin_user_id),",
    "            KEY idx_expires_at (expires_at),",
    "            CONSTRAINT fk_admin_sessions_user FOREIGN KEY (admin_user_id) REFERENCES admin_users(id) ON DELETE CASCADE ON UPDATE CASCADE",
    "        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\");",
    "    }",
    "",
    "    private function bootstrapEnvIfNeeded(): void",
    "    {",
    "        foreach (self::REQUIRED_VARS as $v) {",
    "            if (getenv($v) === false) {",
    "                $env = dirname(__DIR__,1).'/.env';",
    "                if (!is_file($env)) return;",
    "                foreach (file($env, FILE_IGNORE_NEW_LINES|FILE_SKIP_EMPTY_LINES) as $line) {",
    "                    if ($line[0]==='#' || !str_contains($line,'=')) continue;",
    "                    [$k,$val] = array_map('trim', explode('=', $line, 2));",
    "                    if ($k && getenv($k)===false) {",
    "                        putenv(\"$k=$val\");",
    "                        $_ENV[$k] = $val;",
    "                    }",
    "                }",
    "                break;",
    "            }",
    "        }",
    "    }",
    "}",
    "EOF",
    "",
    "# Create admin_auth.php",
    "cat > /var/www/html/includes/admin_auth.php << 'EOF'",
    "<?php",
    "require_once __DIR__ . '/AdminDBConfig.php';",
    "use Axialy\\AdminConfig\\AdminDBConfig;",
    "",
    "function requireAdminAuth()",
    "{",
    "    if (session_status() === PHP_SESSION_NONE) {",
    "        session_start();",
    "    }",
    "    if (empty($_SESSION['admin_user_id']) || empty($_SESSION['admin_session_token'])) {",
    "        logoutAndRedirect();",
    "    }",
    "    $adminDB = AdminDBConfig::getInstance()->getPdo();",
    "    $stmt = $adminDB->prepare(\"",
    "        SELECT s.id, s.expires_at, u.username, u.is_active, u.is_sys_admin",
    "          FROM admin_user_sessions s",
    "          JOIN admin_users u ON s.admin_user_id = u.id",
    "         WHERE s.admin_user_id = :uid AND s.session_token = :tok AND s.expires_at > NOW() LIMIT 1",
    "    \");",
    "    $stmt->execute([':uid' => $_SESSION['admin_user_id'], ':tok' => $_SESSION['admin_session_token']]);",
    "    $row = $stmt->fetch(\\PDO::FETCH_ASSOC);",
    "    if (!$row) {",
    "        logoutAndRedirect();",
    "    }",
    "    if ((int)$row['is_active'] !== 1) {",
    "        logoutAndRedirect('Account disabled');",
    "    }",
    "}",
    "",
    "function logoutAndRedirect($msg = '')",
    "{",
    "    $adminDB = AdminDBConfig::getInstance()->getPdo();",
    "    if (!empty($_SESSION['admin_user_id']) && !empty($_SESSION['admin_session_token'])) {",
    "        $del = $adminDB->prepare(\"DELETE FROM admin_user_sessions WHERE admin_user_id = :uid AND session_token = :tok\");",
    "        $del->execute([':uid' => $_SESSION['admin_user_id'], ':tok' => $_SESSION['admin_session_token']]);",
    "    }",
    "    $_SESSION = [];",
    "    session_destroy();",
    "    header('Location: /admin_login.php');",
    "    exit;",
    "}",
    "EOF",
    "",
    "# Create index.php",
    "cat > /var/www/html/index.php << 'EOF'",
    "<?php",
    "session_name('axialy_admin_session');",
    "session_start();",
    "require_once __DIR__ . '/includes/AdminDBConfig.php';",
    "use Axialy\\AdminConfig\\AdminDBConfig;",
    "",
    "if (empty($_SESSION['csrf_token'])) {",
    "    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));",
    "}",
    "$csrfToken = $_SESSION['csrf_token'];",
    "",
    "// Check if initial admin user exists",
    "$adminDB = AdminDBConfig::getInstance()->getPdo();",
    "$stmt = $adminDB->prepare(\"SELECT COUNT(*) FROM admin_users WHERE username = 'caseylide'\");",
    "$stmt->execute();",
    "$caseyExists = (bool)$stmt->fetchColumn();",
    "",
    "if (!$caseyExists) {",
    "    echo '<!DOCTYPE html><html><head><title>Axialy Admin - Initialization</title></head>';",
    "    echo '<body><h1>Welcome to Axialy Platform Administration</h1>';",
    "    echo '<p>The system is awaiting input from the primary administrator.</p>';",
    "    echo '<form method=\"post\" action=\"init_user.php\">';",
    "    echo '<input type=\"password\" name=\"init_code\" placeholder=\"Enter admin code...\" required>';",
    "    echo '<button type=\"submit\">Initialize</button>';",
    "    echo '</form></body></html>';",
    "    exit;",
    "}",
    "",
    "// Require authentication for main interface",
    "require_once __DIR__ . '/includes/admin_auth.php';",
    "requireAdminAuth();",
    "",
    "$env = $_SESSION['admin_env'] ?? 'production';",
    "",
    "if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['env_select'])) {",
    "    if (hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'] ?? '')) {",
    "        $choice = $_POST['env_select'];",
    "        $validEnvs = ['production','clients','beta','test','uat','firstlook','aii'];",
    "        if (in_array($choice, $validEnvs, true)) {",
    "            $_SESSION['admin_env'] = $choice;",
    "        }",
    "    }",
    "    header('Location: index.php');",
    "    exit;",
    "}",
    "",
    "$mapping = [",
    "    'production' => 'https://app.axiaba.com',",
    "    'clients' => 'https://clients.axiaba.com',",
    "    'beta' => 'https://beta.axiaba.com',",
    "    'test' => 'https://app-test.axiaba.com',",
    "    'uat' => 'https://app-uat.axiaba.com',",
    "    'firstlook' => 'https://firstlook.axiaba.com',",
    "    'aii' => 'https://aii.axiaba.com',",
    "];",
    "$uiUrl = $mapping[$env] ?? 'https://app.axiaba.com';",
    "?>",
    "<!DOCTYPE html>",
    "<html><head><title>Axialy Admin - Home</title>",
    "<style>body{font-family:sans-serif;margin:0;background:#f9f9f9;}.container{max-width:800px;margin:30px auto;padding:20px;background:#fff;border-radius:6px;}</style>",
    "</head><body>",
    "<div class=\"container\">",
    "<h1>Axialy Admin Dashboard</h1>",
    "<p>Welcome, Admin. You are logged in.</p>",
    "<p><strong>Current Environment:</strong> <?php echo htmlspecialchars($env); ?></p>",
    "<form method=\"POST\">",
    "<input type=\"hidden\" name=\"csrf_token\" value=\"<?php echo htmlspecialchars($csrfToken); ?>\">",
    "<label>Switch Environment: ",
    "<select name=\"env_select\">",
    "<?php foreach (['production','clients','beta','test','uat','firstlook','aii'] as $v): ?>",
    "<option value=\"<?php echo $v; ?>\" <?php if ($v === $env) echo 'selected'; ?>><?php echo ucfirst($v); ?></option>",
    "<?php endforeach; ?>",
    "</select>",
    "</label>",
    "<button type=\"submit\">Apply</button>",
    "</form>",
    "<br>",
    "<a href=\"<?php echo $uiUrl; ?>\" target=\"_blank\">Open Axialy UI (<?php echo htmlspecialchars($env); ?>)</a><br>",
    "<a href=\"logout.php\">Logout</a>",
    "</div></body></html>",
    "EOF",
    "",
    "# Create admin_login.php",
    "cat > /var/www/html/admin_login.php << 'EOF'",
    "<?php",
    "$isSecure = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || ($_SERVER['SERVER_PORT'] == 443) || (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https');",
    "",
    "if ($_SERVER['REQUEST_METHOD'] === 'POST' && empty($_COOKIE['axialy_admin_session']) && !empty($_POST['sid'])) {",
    "    $sid = preg_replace('/[^A-Za-z0-9]/', '', $_POST['sid']);",
    "    if ($sid) session_id($sid);",
    "}",
    "",
    "session_set_cookie_params(['lifetime' => 0, 'path' => '/', 'domain' => '', 'secure' => $isSecure, 'httponly' => true, 'samesite' => $isSecure ? 'Strict' : 'Lax']);",
    "session_name('axialy_admin_session');",
    "session_start();",
    "",
    "if (empty($_COOKIE[session_name()])) {",
    "    setcookie(session_name(), session_id(), ['expires' => 0, 'path' => '/', 'domain' => '', 'secure' => $isSecure, 'httponly' => true, 'samesite' => $isSecure ? 'Strict' : 'Lax']);",
    "}",
    "",
    "require_once __DIR__ . '/includes/AdminDBConfig.php';",
    "use Axialy\\AdminConfig\\AdminDBConfig;",
    "",
    "if (empty($_SESSION['csrf_token'])) {",
    "    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));",
    "}",
    "$csrfToken = $_SESSION['csrf_token'];",
    "$errorMessage = '';",
    "",
    "if ($_SERVER['REQUEST_METHOD'] === 'POST') {",
    "    $username = trim($_POST['username'] ?? '');",
    "    $password = trim($_POST['password'] ?? '');",
    "    if (!$username || !$password) {",
    "        $errorMessage = 'Please enter your username and password.';",
    "    } else {",
    "        try {",
    "            $adminDB = AdminDBConfig::getInstance()->getPdo();",
    "            $stmt = $adminDB->prepare(\"SELECT * FROM admin_users WHERE username = :u LIMIT 1\");",
    "            $stmt->execute([':u' => $username]);",
    "            $adminUser = $stmt->fetch(\\PDO::FETCH_ASSOC);",
    "            if (!$adminUser) {",
    "                $errorMessage = 'Invalid credentials.';",
    "            } elseif ((int)$adminUser['is_active'] !== 1) {",
    "                $errorMessage = 'This admin account is disabled.';",
    "            } elseif (!password_verify($password, $adminUser['password'])) {",
    "                $errorMessage = 'Invalid credentials.';",
    "            } else {",
    "                $del = $adminDB->prepare(\"DELETE FROM admin_user_sessions WHERE admin_user_id = :uid\");",
    "                $del->execute([':uid' => $adminUser['id']]);",
    "                $sessionToken = bin2hex(random_bytes(32));",
    "                $expiresAt = date('Y-m-d H:i:s', strtotime('+4 hours'));",
    "                $ins = $adminDB->prepare(\"INSERT INTO admin_user_sessions (admin_user_id, session_token, created_at, expires_at) VALUES (:uid, :tok, NOW(), :exp)\");",
    "                $ins->execute([':uid' => $adminUser['id'], ':tok' => $sessionToken, ':exp' => $expiresAt]);",
    "                $_SESSION['admin_user_id'] = $adminUser['id'];",
    "                $_SESSION['admin_session_token'] = $sessionToken;",
    "                header('Location: index.php');",
    "                exit;",
    "            }",
    "        } catch (\\Exception $ex) {",
    "            error_log(\"Admin login error: \" . $ex->getMessage());",
    "            $errorMessage = 'An error occurred. Please try again.';",
    "        }",
    "    }",
    "}",
    "?>",
    "<!DOCTYPE html>",
    "<html><head><title>Axialy Admin Login</title>",
    "<style>body{font-family:sans-serif;background:#f4f4f4;margin:0;}.container{max-width:400px;margin:40px auto;background:#fff;padding:20px;border-radius:6px;}.error{color:red;margin-bottom:1em;}input[type=\"text\"],input[type=\"password\"]{width:100%;padding:8px;margin-top:4px;box-sizing:border-box;}button{margin-top:1.5em;padding:10px 20px;width:100%;background:#007BFF;color:#fff;border:none;border-radius:4px;cursor:pointer;}</style>",
    "</head><body>",
    "<div class=\"container\">",
    "<h2>Axialy Admin Login</h2>",
    "<?php if ($errorMessage): ?><div class=\"error\"><?php echo htmlspecialchars($errorMessage); ?></div><?php endif; ?>",
    "<form method=\"POST\" action=\"\">",
    "<input type=\"hidden\" name=\"sid\" value=\"<?php echo htmlspecialchars(session_id()); ?>\">",
    "<input type=\"hidden\" name=\"csrf_token\" value=\"<?php echo htmlspecialchars($csrfToken); ?>\">",
    "<label>Username: <input type=\"text\" name=\"username\" autofocus required></label><br>",
    "<label>Password: <input type=\"password\" name=\"password\" required></label><br>",
    "<button type=\"submit\">Log In</button>",
    "</form>",
    "</div></body></html>",
    "EOF",
    "",
    "# Create init_user.php",
    "cat > /var/www/html/init_user.php << 'EOF'",
    "<?php",
    "header('Content-Type: application/json');",
    "if ($_SERVER['REQUEST_METHOD'] !== 'POST') {",
    "    echo json_encode(['success' => false, 'message' => 'Method not allowed']);",
    "    exit;",
    "}",
    "",
    "require_once __DIR__ . '/includes/AdminDBConfig.php';",
    "use Axialy\\AdminConfig\\AdminDBConfig;",
    "",
    "try {",
    "    $initCode = $_POST['init_code'] ?? '';",
    "    if ($initCode !== 'Casellio') {",
    "        echo json_encode(['success' => false, 'message' => 'Invalid initialization code']);",
    "        exit;",
    "    }",
    "    $adminDB = AdminDBConfig::getInstance()->getPdo();",
    "    $stmt = $adminDB->prepare(\"SELECT COUNT(*) FROM admin_users WHERE username = 'caseylide'\");",
    "    $stmt->execute();",
    "    $count = (int)$stmt->fetchColumn();",
    "    if ($count > 0) {",
    "        echo json_encode(['success' => false, 'message' => 'User already exists']);",
    "        exit;",
    "    }",
    "    $hashed = password_hash('Casellio', PASSWORD_BCRYPT);",
    "    $ins = $adminDB->prepare(\"INSERT INTO admin_users (username, password, email, is_active, is_sys_admin, created_at) VALUES ('caseylide', :pass, 'caseylide@gmail.com', 1, 1, NOW())\");",
    "    $ins->execute([':pass' => $hashed]);",
    "    echo json_encode(['success' => true]);",
    "} catch (\\Exception $ex) {",
    "    echo json_encode(['success' => false, 'message' => $ex->getMessage()]);",
    "}",
    "",
    "// Redirect to login page after successful initialization",
    "if ($_SERVER['REQUEST_METHOD'] === 'POST' && ($_POST['init_code'] ?? '') === 'Casellio') {",
    "    header('Location: admin_login.php');",
    "    exit;",
    "}",
    "EOF",
    "",
    "# Create logout.php",
    "cat > /var/www/html/logout.php << 'EOF'",
    "<?php",
    "session_name('axialy_admin_session');",
    "session_start();",
    "require_once __DIR__ . '/includes/admin_auth.php';",
    "logoutAndRedirect();",
    "EOF",
    "",
    "# Create health check endpoint",
    "cat > /var/www/html/health.php << 'EOF'",
    "<?php",
    "header('Content-Type: application/json');",
    "$health = ['status' => 'ok', 'timestamp' => date('c'), 'services' => []];",
    "try {",
    "    require_once __DIR__ . '/includes/AdminDBConfig.php';",
    "    use Axialy\\AdminConfig\\AdminDBConfig;",
    "    AdminDBConfig::getInstance()->getPdo();",
    "    $health['services']['database'] = 'ok';",
    "} catch (Exception $e) {",
    "    $health['services']['database'] = 'error';",
    "    $health['status'] = 'error';",
    "    $health['database_error'] = $e->getMessage();",
    "}",
    "$health['services']['php'] = 'ok';",
    "$health['php_version'] = PHP_VERSION;",
    "$health['services']['apache'] = 'ok';",
    "echo json_encode($health, JSON_PRETTY_PRINT);",
    "EOF",
    "",
    "# Create .env file with proper configuration",
    "echo 'Creating environment configuration...'",
    "cat > /var/www/html/.env << EOF",
    "DB_HOST=${var.db_host}",
    "DB_PORT=${var.db_port}",
    "DB_USER=${var.db_user}",
    "DB_PASSWORD=${var.db_password}",
    "DB_NAME=axialy_admin",
    "UI_DB_HOST=${var.db_host}",
    "UI_DB_PORT=${var.db_port}",
    "UI_DB_USER=${var.db_user}",
    "UI_DB_PASSWORD=${var.db_password}",
    "UI_DB_NAME=axialy_ui",
    "APP_ENV=production",
    "APP_DEBUG=false",
    "ADMIN_DEFAULT_USER=${var.admin_default_user}",
    "ADMIN_DEFAULT_EMAIL=${var.admin_default_email}",
    "ADMIN_DEFAULT_PASSWORD=${var.admin_default_password}",
    "SMTP_HOST=${var.smtp_host}",
    "SMTP_PORT=${var.smtp_port}",
    "SMTP_USER=${var.smtp_user}",
    "SMTP_PASSWORD=${var.smtp_password}",
    "SMTP_SECURE=${var.smtp_secure}",
    "EOF",
    "",
    "# Configure Apache to serve from /var/www/html directly",
    "echo 'Configuring Apache...'",
    "cat > /etc/httpd/conf.d/axialy-admin.conf << 'EOF'",
    "<VirtualHost *:80>",
    "    DocumentRoot /var/www/html",
    "    ServerName admin.axialy.com",
    "    DirectoryIndex index.php admin_login.php",
    "    ",
    "    <Directory /var/www/html>",
    "        Options -Indexes +FollowSymLinks",
    "        AllowOverride All",
    "        Require all granted",
    "        ",
    "        # Security headers",
    "        Header always set X-Content-Type-Options nosniff",
    "        Header always set X-Frame-Options DENY",
    "        Header always set X-XSS-Protection \"1; mode=block\"",
    "    </Directory>",
    "    ",
    "    # Hide sensitive files",
    "    <FilesMatch \"\\.(env|log|ini)$\">",
    "        Require all denied",
    "    </FilesMatch>",
    "    ",
    "    # PHP handling",
    "    <FilesMatch \\.php$>",
    "        SetHandler \"proxy:unix:/run/php-fpm/www.sock|fcgi://localhost\"",
    "    </FilesMatch>",
    "    ",
    "    # Logging",
    "    ErrorLog /var/log/httpd/axialy-admin-error.log",
    "    CustomLog /var/log/httpd/axialy-admin-access.log combined",
    "</VirtualHost>",
    "EOF",
    "",
    "# Create .htaccess for additional security",
    "cat > /var/www/html/.htaccess << 'EOF'",
    "# Security headers",
    "<IfModule mod_headers.c>",
    "    Header always set X-Content-Type-Options nosniff",
    "    Header always set X-Frame-Options DENY",
    "    Header always set X-XSS-Protection \"1; mode=block\"",
    "</IfModule>",
    "",
    "# Prevent access to sensitive files",
    "<FilesMatch \"\\.(env|log|ini|conf)$\">",
    "    Order allow,deny",
    "    Deny from all",
    "</FilesMatch>",
    "",
    "# Directory protection",
    "<FilesMatch \"^\\.\">",
    "    Order allow,deny",
    "    Deny from all",
    "</FilesMatch>",
    "",
    "# PHP error handling",
    "php_flag display_errors Off",
    "php_flag log_errors On",
    "php_value error_log /var/log/httpd/php-errors.log",
    "EOF",
    "",
    "# Set proper permissions",
    "echo 'Setting file permissions...'",
    "chown -R apache:apache /var/www/html",
    "chmod -R 755 /var/www/html",
    "chmod 600 /var/www/html/.env",
    "chmod 644 /var/www/html/*.php",
    "chmod 755 /var/www/html/includes",
    "chmod 644 /var/www/html/includes/*.php",
    "",
    "# Create log directories",
    "mkdir -p /var/log/axialy-admin",
    "chown apache:apache /var/log/axialy-admin",
    "touch /var/log/php-errors.log",
    "chown apache:apache /var/log/php-errors.log",
    "",
    "# Start and enable services",
    "echo 'Starting services...'",
    "systemctl start httpd || error_exit 'Failed to start Apache'",
    "systemctl enable httpd",
    "systemctl start php-fpm || error_exit 'Failed to start PHP-FPM'",
    "systemctl enable php-fpm",
    "",
    "# Test database connection",
    "echo 'Testing database connection...'",
    "php -r \"",
    "\\$host = '${var.db_host}';",
    "\\$port = '${var.db_port}';",
    "\\$user = '${var.db_user}';",
    "\\$pass = '${var.db_password}';",
    "\\$dsn = \\\"mysql:host=\\$host;port=\\$port;dbname=axialy_admin;charset=utf8mb4\\\";",
    "try {",
    "    \\$pdo = new PDO(\\$dsn, \\$user, \\$pass, [",
    "        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,",
    "        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,",
    "    ]);",
    "    echo 'Database connection successful!' . PHP_EOL;",
    "} catch (Exception \\$e) {",
    "    echo 'Database connection failed: ' . \\$e->getMessage() . PHP_EOL;",
    "    exit(1);",
    "}",
    "\" || error_exit 'Database connection test failed'",
    "",
    "# Restart services to ensure everything is loaded",
    "echo 'Restarting services...'",
    "systemctl restart httpd",
    "systemctl restart php-fpm",
    "",
    "# Wait for services to fully start",
    "sleep 5",
    "",
    "# Verify services are running",
    "systemctl is-active httpd || error_exit 'Apache failed to start properly'",
    "systemctl is-active php-fpm || error_exit 'PHP-FPM failed to start properly'",
    "",
    "# Test HTTP response",
    "echo 'Testing HTTP response...'",
    "PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)",
    "sleep 3",
    "",
    "# Test various endpoints",
    "echo 'Testing health endpoint...'",
    "HEALTH_STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost/health.php || echo '000')",
    "echo \"Health endpoint status: $HEALTH_STATUS\"",
    "",
    "echo 'Testing admin login endpoint...'",
    "LOGIN_STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost/admin_login.php || echo '000')",
    "echo \"Login endpoint status: $LOGIN_STATUS\"",
    "",
    "echo 'Testing main index endpoint...'",
    "INDEX_STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost/index.php || echo '000')",
    "echo \"Index endpoint status: $INDEX_STATUS\"",
    "",
    "if [ \"$LOGIN_STATUS\" = \"200\" ]; then",
    "    echo '✓ Application is responding correctly (HTTP '$LOGIN_STATUS')'",
    "    echo '✓ Admin login page accessible at: http://'$PUBLIC_IP'/admin_login.php'",
    "else",
    "    echo '⚠ Application response status: HTTP '$LOGIN_STATUS",
    "    echo 'Checking Apache error logs:'",
    "    tail -20 /var/log/httpd/error_log || true",
    "    echo 'Checking PHP error logs:'",
    "    tail -20 /var/log/php-errors.log || true",
    "fi",
    "",
    "# Final status report",
    "echo ''",
    "echo '=================================================='",
    "echo '✓ Axialy Admin server setup completed at $(date)'",
    "echo '=================================================='",
    "echo 'Server Details:'",
    "echo '- Public IP: '$PUBLIC_IP",
    "echo '- Admin Login: http://'$PUBLIC_IP'/admin_login.php'",
    "echo '- Health Check: http://'$PUBLIC_IP'/health.php'",
    "echo '- Main Dashboard: http://'$PUBLIC_IP'/index.php'",
    "echo ''",
    "echo 'Database Connection:'",
    "echo '- Host: ${var.db_host}'",
    "echo '- Databases: axialy_admin, axialy_ui'",
    "echo ''",
    "echo 'Initial Setup Instructions:'",
    "echo '1. Visit the admin login page'",
    "echo '2. If no users exist, enter \"Casellio\" as the admin code'",
    "echo '3. Login with username: caseylide, password: Casellio'",
    "echo '4. Change the default password after first login'",
    "echo '=================================================='",
    "",
    "# Create a startup verification script",
    "cat > /usr/local/bin/verify-axialy-admin << 'EOF'",
    "#!/bin/bash",
    "echo \"Verifying Axialy Admin deployment...\"",
    "echo \"Apache status: $(systemctl is-active httpd)\"",
    "echo \"PHP-FPM status: $(systemctl is-active php-fpm)\"",
    "echo \"Login page test: $(curl -s -o /dev/null -w '%{http_code}' http://localhost/admin_login.php)\"",
    "echo \"Health check test: $(curl -s -o /dev/null -w '%{http_code}' http://localhost/health.php)\"",
    "echo \"Database test:\"",
    "php -r \"",
    "require_once '/var/www/html/includes/AdminDBConfig.php';",
    "use Axialy\\AdminConfig\\AdminDBConfig;",
    "try {",
    "    AdminDBConfig::getInstance()->getPdo();",
    "    echo 'Database: OK' . PHP_EOL;",
    "} catch (Exception \\$e) {",
    "    echo 'Database: ERROR - ' . \\$e->getMessage() . PHP_EOL;",
    "}",
    "\"",
    "EOF",
    "chmod +x /usr/local/bin/verify-axialy-admin",
    "",
    "echo '✓ Setup completed successfully. Use \"verify-axialy-admin\" command to check status.'"
